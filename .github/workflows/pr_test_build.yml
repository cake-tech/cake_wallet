name: PR Test Build

on:
  pull_request:
    branches: [ main ]

jobs:
  PR_test_build:

    runs-on: ubuntu-20.04
    env:
      STORE_PASS: test@cake_wallet
      KEY_PASS: test@cake_wallet

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '8.x'

      - name: Flutter action
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.7.x'
          channel: stable

      - name: Install package dependencies
        run: sudo apt-get install -y curl unzip automake build-essential file pkg-config git python libtool libtinfo5 cmake clang

      - name: Execute Build and Setup Commands
        run: |
          sudo mkdir -p /opt/android
          sudo chown $USER /opt/android
          cd /opt/android
          git clone https://github.com/cake-tech/cake_wallet.git --branch $GITHUB_HEAD_REF
          cd cake_wallet/scripts/android/
          ./install_ndk.sh
          source ./app_env.sh cakewallet
          ./app_config.sh

      - name: Cache Externals
        id: cache-externals
        uses: actions/cache@v3
        with:
          path: |
            /opt/android/cake_wallet/cw_haven/android/.cxx
            /opt/android/cake_wallet/cw_haven/ios/External
            /opt/android/cake_wallet/cw_monero/android/.cxx
            /opt/android/cake_wallet/cw_monero/ios/External
            /opt/android/cake_wallet/cw_shared_external/ios/External
          key: ${{ hashFiles('**/build_monero.sh', '**/build_haven.sh') }}

      - if: ${{ steps.cache-externals.outputs.cache-hit != 'true' }}
        name: Generate Externals
        run: |
          cd /opt/android/cake_wallet/scripts/android/
          source ./app_env.sh cakewallet
          ./build_all.sh
          ./copy_monero_deps.sh

      - name: Install Flutter dependencies
        run: |
          cd /opt/android/cake_wallet
          flutter pub get

      - name: Generate KeyStore
        run: |
          cd /opt/android/cake_wallet/android/app
          keytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias testKey -noprompt -dname "CN=CakeWallet, OU=CakeWallet, O=CakeWallet, L=Florida, S=America, C=USA" -storepass $STORE_PASS -keypass $KEY_PASS

      - name: Generate key properties
        run: |
          cd /opt/android/cake_wallet
          flutter packages pub run tool/generate_android_key_properties.dart keyAlias=testKey storeFile=key.jks storePassword=$STORE_PASS keyPassword=$KEY_PASS

      - name: Generate localization
        run: |
          cd /opt/android/cake_wallet
          flutter packages pub run tool/generate_localization.dart

      - name: Build generated code
        run: |
          cd /opt/android/cake_wallet
          cd cw_core && flutter pub get && flutter packages pub run build_runner build --delete-conflicting-outputs && cd ..
          cd cw_monero && flutter pub get && flutter packages pub run build_runner build --delete-conflicting-outputs && cd ..
          cd cw_bitcoin && flutter pub get && flutter packages pub run build_runner build --delete-conflicting-outputs && cd ..
          cd cw_haven && flutter pub get && flutter packages pub run build_runner build --delete-conflicting-outputs && cd ..
          flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Add secrets
        run: |
          cd /opt/android/cake_wallet
          touch lib/.secrets.g.dart
          echo "const salt = '${{ secrets.SALT }}';" > lib/.secrets.g.dart
          echo "const keychainSalt = '${{ secrets.KEY_CHAIN_SALT }}';" >> lib/.secrets.g.dart
          echo "const key = '${{ secrets.KEY }}';" >> lib/.secrets.g.dart
          echo "const walletSalt = '${{ secrets.WALLET_SALT }}';" >> lib/.secrets.g.dart
          echo "const shortKey = '${{ secrets.SHORT_KEY }}';" >> lib/.secrets.g.dart
          echo "const backupSalt = '${{ secrets.BACKUP_SALT }}';" >> lib/.secrets.g.dart
          echo "const backupKeychainSalt = '${{ secrets.BACKUP_KEY_CHAIN_SALT }}';" >> lib/.secrets.g.dart
          echo "const changeNowApiKey = '${{ secrets.CHANGE_NOW_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const changeNowApiKeyDesktop = '${{ secrets.CHANGE_NOW_API_KEY_DESKTOP }}';" >> lib/.secrets.g.dart
          echo "const wyreSecretKey = '${{ secrets.WYRE_SECRET_KEY }}';" >> lib/.secrets.g.dart
          echo "const wyreApiKey = '${{ secrets.WYRE_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const wyreAccountId = '${{ secrets.WYRE_ACCOUNT_ID }}';" >> lib/.secrets.g.dart
          echo "const moonPayApiKey = '${{ secrets.MOON_PAY_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const moonPaySecretKey = '${{ secrets.MOON_PAY_SECRET_KEY }}';" >> lib/.secrets.g.dart
          echo "const sideShiftAffiliateId = '${{ secrets.SIDE_SHIFT_AFFILIATE_ID }}';" >> lib/.secrets.g.dart
          echo "const sideShiftApiKey = '${{ secrets.SIDE_SHIFT_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const simpleSwapApiKey = '${{ secrets.SIMPLE_SWAP_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const simpleSwapApiKeyDesktop = '${{ secrets.SIMPLE_SWAP_API_KEY_DESKTOP }}';" >> lib/.secrets.g.dart
          echo "const onramperApiKey = '${{ secrets.ONRAMPER_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const anypayToken = '${{ secrets.ANY_PAY_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const ioniaClientId = '${{ secrets.IONIA_CLIENT_ID }}';" >> lib/.secrets.g.dart
          echo "const twitterBearerToken = '${{ secrets.TWITTER_BEARER_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const trocadorApiKey = '${{ secrets.TROCADOR_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const trocadorExchangeMarkup = '${{ secrets.TROCADOR_EXCHANGE_MARKUP }}';" >> lib/.secrets.g.dart
          echo "const anonPayReferralCode = '${{ secrets.ANON_PAY_REFERRAL_CODE }}';" >> lib/.secrets.g.dart
          echo "const fiatApiKey = '${{ secrets.FIAT_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const payfuraApiKey = '${{ secrets.PAYFURA_API_KEY }}';" >> lib/.secrets.g.dart

      - name: Rename app
        run: echo -e "id=com.cakewallet.test\nname=$GITHUB_HEAD_REF" > /opt/android/cake_wallet/android/app.properties

      - name: Build
        run: |
          cd /opt/android/cake_wallet
          flutter build apk --release

#      - name: Push to App Center
#        run: |
#          echo 'Installing App Center CLI tools'
#          npm install -g appcenter-cli
#          echo "Publishing test to App Center"
#          appcenter distribute release \
#              --group "Testers" \
#              --file "/opt/android/cake_wallet/build/app/outputs/apk/release/app-release.apk" \
#              --release-notes ${GITHUB_HEAD_REF} \
#              --app Cake-Labs/Cake-Wallet \
#              --token ${{ secrets.APP_CENTER_TOKEN }} \
#              --quiet

      - name: Rename apk file
        run: |
          cd /opt/android/cake_wallet/build/app/outputs/apk/release
          mkdir test-apk
          cp app-release.apk test-apk/$GITHUB_HEAD_REF.apk

      - name: Upload Artifact
        uses: kittaakos/upload-artifact-as-is@v0
        with:
          path: /opt/android/cake_wallet/build/app/outputs/apk/release/test-apk/

      - name: Send Test APK
        continue-on-error: true
        run: |
          cd /opt/android/cake_wallet
          var=$(curl --upload-file build/app/outputs/apk/release/app-release.apk https://transfer.sh/$GITHUB_HEAD_REF.apk -H "Max-Days: 10")
          curl ${{ secrets.SLACK_WEB_HOOK }} -H "Content-Type: application/json" -d '{"apk_link": "'"$var"'","ticket": "'"$GITHUB_HEAD_REF"'"}'
