name: PR Test Build

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch name to build"
        required: true
        default: "main"

jobs:
  PR_test_build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        api-level: [29]
    env:
      STORE_PASS: test@cake_wallet
      KEY_PASS: test@cake_wallet
      PR_NUMBER: ${{ github.event.number }}

    steps:
      - name: is pr
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_ENV

      - name: is not pr
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV

      - name: Free Disk Space (Ubuntu)
        uses: insightsengineering/disk-space-reclaimer@v1
        with:
          tools-cache: true
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
          docker-images: true

      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Configure placeholder git details
        run: |
          git config --global user.email "CI@cakewallet.com"
          git config --global user.name "Cake Github Actions"
      - name: Flutter action
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.24.0"
          channel: stable

      - name: Install package dependencies
        run: |
          sudo apt update
          sudo apt-get install -y curl unzip automake build-essential file pkg-config git python libtool libtinfo5 cmake clang

      - name: Execute Build and Setup Commands
        run: |
          sudo mkdir -p /opt/android
          sudo chown $USER /opt/android
          cd /opt/android
          -y curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
          cargo install cargo-ndk
          git clone https://github.com/cake-tech/cake_wallet.git --branch ${{ env.BRANCH_NAME }}
          cd cake_wallet/scripts/android/
          ./install_ndk.sh
          source ./app_env.sh cakewallet
          chmod +x pubspec_gen.sh
          ./app_config.sh

      - name: Cache Externals
        id: cache-externals
        uses: actions/cache@v3
        with:
          path: |
            /opt/android/cake_wallet/cw_haven/android/.cxx
            /opt/android/cake_wallet/scripts/monero_c/release
          key: ${{ hashFiles('**/prepare_moneroc.sh' ,'**/build_monero_all.sh' ,'**/cache_dependencies.yml') }}

      - if: ${{ steps.cache-externals.outputs.cache-hit != 'true' }}
        name: Generate Externals
        run: |
          cd /opt/android/cake_wallet/scripts/android/
          source ./app_env.sh cakewallet
          ./build_monero_all.sh

      - name: Install Flutter dependencies
        run: |
          cd /opt/android/cake_wallet
          flutter pub get


      - name: Install go and gomobile
        run: |
          # install go > 1.23:
          wget https://go.dev/dl/go1.23.1.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.23.1.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
          export PATH=$PATH:~/go/bin
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Build mwebd
        run: |
          # paths are reset after each step, so we need to set them again:
          export PATH=$PATH:/usr/local/go/bin
          export PATH=$PATH:~/go/bin
          cd /opt/android/cake_wallet/scripts/android/
          ./build_mwebd.sh --dont-install


      - name: Set up cache path
        id: cache-path
        run: echo "cache-file-path=/opt/android/cake_wallet/android/app/key.jks" >> $GITHUB_ENV

      - name: Cache Keystore
        id: cache-keystore
        uses: actions/cache@v3
        with:
          path: ${{ env.cache-file-path }}
          key: keystore

      - if: ${{ steps.cache-keystore.outputs.cache-hit != 'true' }}
        name: Generate KeyStore
        run: |
          cd /opt/android/cake_wallet/android/app
          keytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias testKey -noprompt -dname "CN=CakeWallet, OU=CakeWallet, O=CakeWallet, L=Florida, S=America, C=USA" -storepass $STORE_PASS -keypass $KEY_PASS

      - name: Generate key properties
        run: |
          cd /opt/android/cake_wallet
          dart run tool/generate_android_key_properties.dart keyAlias=testKey storeFile=key.jks storePassword=$STORE_PASS keyPassword=$KEY_PASS

      - name: Generate localization
        run: |
          cd /opt/android/cake_wallet
          dart run tool/generate_localization.dart

      - name: Build generated code
        run: |
          cd /opt/android/cake_wallet
          ./model_generator.sh

      - name: Add secrets
        run: |
          cd /opt/android/cake_wallet
          touch lib/.secrets.g.dart
          touch cw_evm/lib/.secrets.g.dart
          touch cw_solana/lib/.secrets.g.dart
          touch cw_core/lib/.secrets.g.dart
          touch cw_nano/lib/.secrets.g.dart
          touch cw_tron/lib/.secrets.g.dart
          echo "const salt = '${{ secrets.SALT }}';" > lib/.secrets.g.dart
          echo "const keychainSalt = '${{ secrets.KEY_CHAIN_SALT }}';" >> lib/.secrets.g.dart
          echo "const key = '${{ secrets.KEY }}';" >> lib/.secrets.g.dart
          echo "const walletSalt = '${{ secrets.WALLET_SALT }}';" >> lib/.secrets.g.dart
          echo "const shortKey = '${{ secrets.SHORT_KEY }}';" >> lib/.secrets.g.dart
          echo "const backupSalt = '${{ secrets.BACKUP_SALT }}';" >> lib/.secrets.g.dart
          echo "const backupKeychainSalt = '${{ secrets.BACKUP_KEY_CHAIN_SALT }}';" >> lib/.secrets.g.dart
          echo "const changeNowApiKey = '${{ secrets.CHANGE_NOW_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const changeNowApiKeyDesktop = '${{ secrets.CHANGE_NOW_API_KEY_DESKTOP }}';" >> lib/.secrets.g.dart
          echo "const wyreSecretKey = '${{ secrets.WYRE_SECRET_KEY }}';" >> lib/.secrets.g.dart
          echo "const wyreApiKey = '${{ secrets.WYRE_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const wyreAccountId = '${{ secrets.WYRE_ACCOUNT_ID }}';" >> lib/.secrets.g.dart
          echo "const moonPayApiKey = '${{ secrets.MOON_PAY_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const moonPaySecretKey = '${{ secrets.MOON_PAY_SECRET_KEY }}';" >> lib/.secrets.g.dart
          echo "const sideShiftAffiliateId = '${{ secrets.SIDE_SHIFT_AFFILIATE_ID }}';" >> lib/.secrets.g.dart
          echo "const simpleSwapApiKey = '${{ secrets.SIMPLE_SWAP_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const simpleSwapApiKeyDesktop = '${{ secrets.SIMPLE_SWAP_API_KEY_DESKTOP }}';" >> lib/.secrets.g.dart
          echo "const onramperApiKey = '${{ secrets.ONRAMPER_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const anypayToken = '${{ secrets.ANY_PAY_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const ioniaClientId = '${{ secrets.IONIA_CLIENT_ID }}';" >> lib/.secrets.g.dart
          echo "const twitterBearerToken = '${{ secrets.TWITTER_BEARER_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const trocadorApiKey = '${{ secrets.TROCADOR_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const trocadorExchangeMarkup = '${{ secrets.TROCADOR_EXCHANGE_MARKUP }}';" >> lib/.secrets.g.dart
          echo "const anonPayReferralCode = '${{ secrets.ANON_PAY_REFERRAL_CODE }}';" >> lib/.secrets.g.dart
          echo "const fiatApiKey = '${{ secrets.FIAT_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const payfuraApiKey = '${{ secrets.PAYFURA_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const ankrApiKey = '${{ secrets.ANKR_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const etherScanApiKey = '${{ secrets.ETHER_SCAN_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const polygonScanApiKey = '${{ secrets.POLYGON_SCAN_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const etherScanApiKey = '${{ secrets.ETHER_SCAN_API_KEY }}';" >> cw_evm/lib/.secrets.g.dart
          echo "const moralisApiKey = '${{ secrets.MORALIS_API_KEY }}';" >> cw_evm/lib/.secrets.g.dart
          echo "const chatwootWebsiteToken = '${{ secrets.CHATWOOT_WEBSITE_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const exolixApiKey = '${{ secrets.EXOLIX_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const robinhoodApplicationId = '${{ secrets.ROBINHOOD_APPLICATION_ID }}';" >> lib/.secrets.g.dart
          echo "const exchangeHelperApiKey = '${{ secrets.ROBINHOOD_CID_CLIENT_SECRET }}';" >> lib/.secrets.g.dart
          echo "const walletConnectProjectId = '${{ secrets.WALLET_CONNECT_PROJECT_ID }}';" >> lib/.secrets.g.dart
          echo "const moralisApiKey = '${{ secrets.MORALIS_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const polygonScanApiKey = '${{ secrets.POLYGON_SCAN_API_KEY }}';" >> cw_evm/lib/.secrets.g.dart
          echo "const ankrApiKey = '${{ secrets.ANKR_API_KEY }}';" >> cw_solana/lib/.secrets.g.dart
          echo "const testCakePayApiKey = '${{ secrets.TEST_CAKE_PAY_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const cakePayApiKey = '${{ secrets.CAKE_PAY_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const authorization = '${{ secrets.CAKE_PAY_AUTHORIZATION }}';" >> lib/.secrets.g.dart
          echo "const CSRFToken = '${{ secrets.CSRF_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const quantexExchangeMarkup = '${{ secrets.QUANTEX_EXCHANGE_MARKUP }}';" >> lib/.secrets.g.dart
          echo "const nano2ApiKey = '${{ secrets.NANO2_API_KEY }}';" >> cw_nano/lib/.secrets.g.dart
          echo "const nanoNowNodesApiKey = '${{ secrets.NANO_NOW_NODES_API_KEY }}';" >> cw_nano/lib/.secrets.g.dart
          echo "const tronGridApiKey = '${{ secrets.TRON_GRID_API_KEY }}';" >> cw_tron/lib/.secrets.g.dart
          echo "const tronNowNodesApiKey = '${{ secrets.TRON_NOW_NODES_API_KEY }}';" >> cw_tron/lib/.secrets.g.dart
          echo "const meldTestApiKey = '${{ secrets.MELD_TEST_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const meldTestPublicKey = '${{ secrets.MELD_TEST_PUBLIC_KEY}}';" >> lib/.secrets.g.dar
          echo "const letsExchangeBearerToken = '${{ secrets.LETS_EXCHANGE_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const letsExchangeAffiliateId = '${{ secrets.LETS_EXCHANGE_AFFILIATE_ID }}';" >> lib/.secrets.g.dart
          echo "const stealthExBearerToken = '${{ secrets.STEALTH_EX_BEARER_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const stealthExAdditionalFeePercent = '${{ secrets.STEALTH_EX_ADDITIONAL_FEE_PERCENT }}';" >> lib/.secrets.g.dart

      - name: Rename app
        run: |
          echo -e "id=com.cakewallet.test_${{ env.PR_NUMBER }}\nname=${{ env.BRANCH_NAME }}" > /opt/android/cake_wallet/android/app.properties

      # Step 3: Download previous build number
      - name: Download previous build number
        id: download-build-number
        run: |
          # Download the artifact if it exists
          if [[ ! -f build_number.txt ]]; then
            echo "1" > build_number.txt
          fi

      # Step 4: Read and Increment Build Number
      - name: Increment Build Number
        id: increment-build-number
        run: |
          # Read current build number from file
          BUILD_NUMBER=$(cat build_number.txt)
          BUILD_NUMBER=$((BUILD_NUMBER + 1))
          echo "New build number: $BUILD_NUMBER"

          # Save the incremented build number
          echo "$BUILD_NUMBER" > build_number.txt

          # Export the build number to use in later steps
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      # Step 5: Update pubspec.yaml with new build number
      - name: Update build number
        run: |
          cd /opt/android/cake_wallet
          sed -i "s/^version: .*/version: 1.0.$BUILD_NUMBER/" pubspec.yaml

      - name: Build
        run: |
          cd /opt/android/cake_wallet
          flutter build apk --release --split-per-abi

      #            - name: Push to App Center
      #              run: |
      #                echo 'Installing App Center CLI tools'
      #                npm install -g appcenter-cli
      #                echo "Publishing test to App Center"
      #                appcenter distribute release \
      #                    --group "Testers" \
      #                    --file "/opt/android/cake_wallet/build/app/outputs/apk/release/app-release.apk" \
      #                    --release-notes ${{ env.BRANCH_NAME }} \
      #                    --app Cake-Labs/Cake-Wallet \
      #                    --token ${{ secrets.APP_CENTER_TOKEN }} \
      #                    --quiet

      - name: Rename apk file
        run: |
          cd /opt/android/cake_wallet/build/app/outputs/flutter-apk
          mkdir test-apk
          cp app-arm64-v8a-release.apk test-apk/${{env.BRANCH_NAME}}.apk
          cp app-x86_64-release.apk test-apk/${{env.BRANCH_NAME}}_x86.apk

      - name: Upload Artifact
        uses: kittaakos/upload-artifact-as-is@v0
        with:
          path: /opt/android/cake_wallet/build/app/outputs/flutter-apk/test-apk/

      # Re-upload updated build number for the next run
      - name: Upload updated build number
        uses: actions/upload-artifact@v3
        with:
          name: build_number
          path: build_number.txt

      - name: Send Test APK
        continue-on-error: true
        uses: adrey/slack-file-upload-action@1.0.5
        with:
          token: ${{ secrets.SLACK_APP_TOKEN }}
          path: /opt/android/cake_wallet/build/app/outputs/flutter-apk/test-apk/${{env.BRANCH_NAME}}.apk
          channel: ${{ secrets.SLACK_APK_CHANNEL }}
          title: "${{ env.BRANCH_NAME }}.apk"
          filename: ${{ env.BRANCH_NAME }}.apk
          initial_comment: ${{ github.event.head_commit.message }}

